// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: menu.sql

package db

import (
	"context"
)

const createMenu = `-- name: CreateMenu :one
INSERT INTO menus (
    name,
    price,
    category_id
) VALUES (
  $1, $2, $3
) RETURNING id, name, price, category_id, status, created_at
`

type CreateMenuParams struct {
	Name       string
	Price      string
	CategoryID int64
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, createMenu, arg.Name, arg.Price, arg.CategoryID)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMenu = `-- name: DeleteMenu :exec
DELETE FROM menus
WHERE id = $1
`

func (q *Queries) DeleteMenu(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMenu, id)
	return err
}

const getMenu = `-- name: GetMenu :one
SELECT id, name, price, category_id, status, created_at FROM menus
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMenu(ctx context.Context, id int64) (Menu, error) {
	row := q.db.QueryRowContext(ctx, getMenu, id)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listMenu = `-- name: ListMenu :many
SELECT id, name, price, category_id, status, created_at FROM menus
WHERE name = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListMenuParams struct {
	Name   string
	Limit  int32
	Offset int32
}

func (q *Queries) ListMenu(ctx context.Context, arg ListMenuParams) ([]Menu, error) {
	rows, err := q.db.QueryContext(ctx, listMenu, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Menu{}
	for rows.Next() {
		var i Menu
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CategoryID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenu = `-- name: UpdateMenu :one
UPDATE menus
SET name = $2,
    price = $3,
    category_id = $4
WHERE id = $1
RETURNING id, name, price, category_id, status, created_at
`

type UpdateMenuParams struct {
	ID         int64
	Name       string
	Price      string
	CategoryID int64
}

func (q *Queries) UpdateMenu(ctx context.Context, arg UpdateMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, updateMenu,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.CategoryID,
	)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
