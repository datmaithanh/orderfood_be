// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payment.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    order_id,
    amount,
    payment_method,
    status
) VALUES (
  $1, $2, $3, $4
) RETURNING id, order_id, amount, payment_method, status, created_at
`

type CreatePaymentParams struct {
	OrderID       int64
	Amount        string
	PaymentMethod string
	Status        string
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.OrderID,
		arg.Amount,
		arg.PaymentMethod,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentMethod,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, order_id, amount, payment_method, status, created_at FROM payments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentMethod,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listPayment = `-- name: ListPayment :many
SELECT id, order_id, amount, payment_method, status, created_at FROM payments
WHERE order_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListPaymentParams struct {
	OrderID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListPayment(ctx context.Context, arg ListPaymentParams) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, listPayment, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Amount,
			&i.PaymentMethod,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments
SET order_id = $2,
    amount = $3,
    payment_method = $4,
    status = $5
WHERE id = $1
RETURNING id, order_id, amount, payment_method, status, created_at
`

type UpdatePaymentParams struct {
	ID            int64
	OrderID       int64
	Amount        string
	PaymentMethod string
	Status        string
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePayment,
		arg.ID,
		arg.OrderID,
		arg.Amount,
		arg.PaymentMethod,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentMethod,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
