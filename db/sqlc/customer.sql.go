// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customer.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    full_name,
    phone_number,
    email
) VALUES (
  $1, $2, $3
) RETURNING id, full_name, phone_number, email, created_at
`

type CreateCustomerParams struct {
	FullName    string
	PhoneNumber string
	Email       string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.FullName, arg.PhoneNumber, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, full_name, phone_number, email, created_at FROM customers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listCustomer = `-- name: ListCustomer :many
SELECT id, full_name, phone_number, email, created_at FROM customers
WHERE phone_number = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListCustomerParams struct {
	PhoneNumber string
	Limit       int32
	Offset      int32
}

func (q *Queries) ListCustomer(ctx context.Context, arg ListCustomerParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomer, arg.PhoneNumber, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.PhoneNumber,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
