// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: table.sql

package db

import (
	"context"
	"database/sql"
)

const createTable = `-- name: CreateTable :one
INSERT INTO tables (
    name,
    qr_text,
    qr_image_url,
    status
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, qr_text, qr_image_url, status, created_at
`

type CreateTableParams struct {
	Name       string
	QrText     string
	QrImageUrl sql.NullString
	Status     string
}

func (q *Queries) CreateTable(ctx context.Context, arg CreateTableParams) (Table, error) {
	row := q.db.QueryRowContext(ctx, createTable,
		arg.Name,
		arg.QrText,
		arg.QrImageUrl,
		arg.Status,
	)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.QrText,
		&i.QrImageUrl,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTable = `-- name: DeleteTable :exec
DELETE FROM tables
WHERE id = $1
`

func (q *Queries) DeleteTable(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTable, id)
	return err
}

const getTable = `-- name: GetTable :one
SELECT id, name, qr_text, qr_image_url, status, created_at FROM tables
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTable(ctx context.Context, id int64) (Table, error) {
	row := q.db.QueryRowContext(ctx, getTable, id)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.QrText,
		&i.QrImageUrl,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listTable = `-- name: ListTable :many
SELECT id, name, qr_text, qr_image_url, status, created_at FROM tables
WHERE name = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTableParams struct {
	Name   string
	Limit  int32
	Offset int32
}

func (q *Queries) ListTable(ctx context.Context, arg ListTableParams) ([]Table, error) {
	rows, err := q.db.QueryContext(ctx, listTable, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Table{}
	for rows.Next() {
		var i Table
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.QrText,
			&i.QrImageUrl,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTable = `-- name: UpdateTable :one
UPDATE tables
SET name = $2,
    qr_text = $3,
    qr_image_url = $4,
    status = $5
WHERE id = $1
RETURNING id, name, qr_text, qr_image_url, status, created_at
`

type UpdateTableParams struct {
	ID         int64
	Name       string
	QrText     string
	QrImageUrl sql.NullString
	Status     string
}

func (q *Queries) UpdateTable(ctx context.Context, arg UpdateTableParams) (Table, error) {
	row := q.db.QueryRowContext(ctx, updateTable,
		arg.ID,
		arg.Name,
		arg.QrText,
		arg.QrImageUrl,
		arg.Status,
	)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.QrText,
		&i.QrImageUrl,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
