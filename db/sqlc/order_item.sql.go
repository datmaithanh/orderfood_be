// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: order_item.sql

package db

import (
	"context"
	"database/sql"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_item (
    order_id,
    menu_id,
    quantity,
    price,
    note_item,
    status
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, order_id, menu_id, quantity, price, note_item, status, created_at
`

type CreateOrderItemParams struct {
	OrderID  int64
	MenuID   int64
	Quantity int32
	Price    string
	NoteItem sql.NullString
	Status   string
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.MenuID,
		arg.Quantity,
		arg.Price,
		arg.NoteItem,
		arg.Status,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.MenuID,
		&i.Quantity,
		&i.Price,
		&i.NoteItem,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_item
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT id, order_id, menu_id, quantity, price, note_item, status, created_at FROM order_item
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderItem(ctx context.Context, id int64) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, getOrderItem, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.MenuID,
		&i.Quantity,
		&i.Price,
		&i.NoteItem,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderItem = `-- name: ListOrderItem :many
SELECT id, order_id, menu_id, quantity, price, note_item, status, created_at FROM order_item
WHERE order_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListOrderItemParams struct {
	OrderID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListOrderItem(ctx context.Context, arg ListOrderItemParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItem, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.MenuID,
			&i.Quantity,
			&i.Price,
			&i.NoteItem,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_item
SET order_id = $2,
    menu_id = $3,
    quantity = $4,
    price = $5,
    note_item = $6,
    status = $7
WHERE id = $1
RETURNING id, order_id, menu_id, quantity, price, note_item, status, created_at
`

type UpdateOrderItemParams struct {
	ID       int64
	OrderID  int64
	MenuID   int64
	Quantity int32
	Price    string
	NoteItem sql.NullString
	Status   string
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItem,
		arg.ID,
		arg.OrderID,
		arg.MenuID,
		arg.Quantity,
		arg.Price,
		arg.NoteItem,
		arg.Status,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.MenuID,
		&i.Quantity,
		&i.Price,
		&i.NoteItem,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
