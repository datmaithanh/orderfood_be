// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_id,
    customer_id,
    table_id,
    status,
    total_price
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, user_id, customer_id, table_id, status, total_price, created_at
`

type CreateOrderParams struct {
	UserID     int64
	CustomerID int64
	TableID    int64
	Status     string
	TotalPrice string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.CustomerID,
		arg.TableID,
		arg.Status,
		arg.TotalPrice,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerID,
		&i.TableID,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, customer_id, table_id, status, total_price, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerID,
		&i.TableID,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
	)
	return i, err
}

const listOrder = `-- name: ListOrder :many
SELECT id, user_id, customer_id, table_id, status, total_price, created_at FROM orders
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListOrderParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

func (q *Queries) ListOrder(ctx context.Context, arg ListOrderParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrder, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CustomerID,
			&i.TableID,
			&i.Status,
			&i.TotalPrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET user_id = $2,
    customer_id = $3,
    table_id = $4,
    status = $5,
    total_price = $6
WHERE id = $1
RETURNING id, user_id, customer_id, table_id, status, total_price, created_at
`

type UpdateOrderParams struct {
	ID         int64
	UserID     int64
	CustomerID int64
	TableID    int64
	Status     string
	TotalPrice string
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.ID,
		arg.UserID,
		arg.CustomerID,
		arg.TableID,
		arg.Status,
		arg.TotalPrice,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerID,
		&i.TableID,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
	)
	return i, err
}
